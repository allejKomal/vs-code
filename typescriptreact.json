{
  "Arrow Function for Event Handler": {
    "prefix": "arrowfunction",
    "body": [
      "const ${1:eventHandler} = (${2:event}) => {",
      "  ${3:// your code here}",
      "};"
    ],
    "description": "Quick snippet for creating an arrow function for an event handler"
  },
  "Context Setup": {
    "prefix": "context",
    "body": [
      "import React, { createContext, useState } from 'react';",
      "",
      "const ${1:ContextName}Context = createContext();",
      "",
      "export const ${1:ContextName}Provider = ({ children }) => {",
      "  const [${2:state}, setState] = useState(${3:defaultValue});",
      "  return (",
      "    <${1:ContextName}Context.Provider value={{ ${2:state}, setState }}>",
      "      {children}",
      "    </${1:ContextName}Context.Provider>",
      "  );",
      "};",
      "",
      "export const use${1:ContextName} = () => useContext(${1:ContextName}Context);"
    ],
    "description": "Sets up a React Context and provider"
  },
  "React Fragment": {
    "prefix": "fragment",
    "body": [
      "<React.Fragment>",
      "  ${1:content}",
      "</React.Fragment>"
    ],
    "description": "Wrap content in a React Fragment (without adding extra DOM nodes)"
  },
  "Conditional Rendering (If Else)": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "  ${2:doSomething}",
      "} else {",
      "  ${3:doSomethingElse}",
      "}"
    ],
    "description": "Basic if-else statement for conditional rendering"
  },
  "Class Component": {
    "prefix": "classcomponent",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${1:ComponentName} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${2:Content}</div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a basic React class component"
  },
  "setTimeout Example": {
    "prefix": "settimeout",
    "body": [
      "setTimeout(() => {",
      "  ${1:// your code to run after timeout}",
      "}, ${2:1000});"
    ],
    "description": "Basic setTimeout implementation"
  },
  "Ternary Conditional Rendering": {
    "prefix": "ternary",
    "body": [
      "${1:condition} ? ${2:doThis} : ${3:doThat}"
    ],
    "description": "Quick ternary conditional for rendering"
  },
  "useCallback Hook": {
    "prefix": "usecallbackhook",
    "body": [
      "const ${1:fnName} = useCallback(() => {",
      "  ${2:// your function logic}",
      "}, [${3:dependencies}]);"
    ],
    "description": "useCallback Hook to memoize functions"
  },
  "useContext Hook": {
    "prefix": "useContext",
    "body": [
      "import { useContext } from 'react';",
      "",
      "const ${1:contextValue} = useContext(${2:YourContext});"
    ],
    "description": "Use the context value with useContext hook"
  },
  "useEffect Hook": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// Your side effect here}",
      "}, [${2:dependencies}]);"
    ],
    "description": "Creates a useEffect hook"
  },
  "useLocalStorage Hook": {
    "prefix": "uselocalstorage",
    "body": [
      "import { useState } from 'react';",
      "",
      "const useLocalStorage = (key, initialValue) => {",
      "  const [storedValue, setStoredValue] = useState(() => {",
      "    try {",
      "      const item = window.localStorage.getItem(key);",
      "      return item ? JSON.parse(item) : initialValue;",
      "    } catch (error) {",
      "      return initialValue;",
      "    }",
      "  });",
      "",
      "  const setValue = (value) => {",
      "    try {",
      "      setStoredValue(value);",
      "      window.localStorage.setItem(key, JSON.stringify(value));",
      "    } catch (error) {",
      "      console.error('Error setting localStorage:', error);",
      "    }",
      "  };",
      "",
      "  return [storedValue, setValue];",
      "};"
    ],
    "description": "Custom hook for using localStorage"
  },
  "React.memo for Component Optimization": {
    "prefix": "memocomponent",
    "body": [
      "const ${1:ComponentName} = React.memo(({ ${2:props} }) => {",
      "  return (",
      "    <div>${3:content}</div>",
      "  );",
      "});"
    ],
    "description": "Optimize component re-renders with React.memo"
  },
  "useMemo Hook": {
    "prefix": "useMemo",
    "body": [
      "const ${1:result} = useMemo(() => {",
      "  return ${2:expensiveComputation};",
      "}, [${3:dependencies}]);"
    ],
    "description": "Memoize a value to avoid unnecessary re-calculations"
  },
  "useRef Hook": {
    "prefix": "useRef",
    "body": [
      "const ${1:refName} = useRef(${2:null});"
    ],
    "description": "Create a ref with useRef"
  },
  "useState Hook": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, ${2:setState}] = useState(${3:initialValue});"
    ],
    "description": "Creates a state variable with useState hook"
  }
}